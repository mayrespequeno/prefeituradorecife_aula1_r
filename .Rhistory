library(tidyverse)
library(here)
library(conflicted)
library(gganimate)
library(gapminder)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
1 + 1
1 + 1
2 * 2 - (4 + 4)/ 2
2*3
4-2
# divisão
5 / 3
4 ^ 2
5 %% 3
5 %/% 3
5 % 2
#Avaliando o objeto a
a
# Salvando 4 am a
a <- 4
#Avaliando o objeto a
a
a <- a * 5
a <- a + 10
a <- seq(a, 100, 5)
View(a)
x <- 1
x1 <- 2
objeto <- 3
meu_objeto <- 4
meu.objeto <- 5
1x <- 1
b <- 2
B <- 3
#Code 1
33/11
divisão <- 33/11
meu-objeto <- 1
numeros <- c(1, 4, 10, pi, 1/3)
texto <- c("a", "b", "GGPLAN", "NGI", "REDE GOVERNANCA")
(tudo_junto <- c(numeros, texto)) # tudo entre parênteses para mostrar  conteúdo do objeto
numeros <- (1, 4, 10, pi, 1/3)
numeros <- c(1, 4, 10, pi, 1/3)
View(tudo_junto)
class(tudo_junto) #tudo se tornou caractere
mean()
mean?
?mean
?mean
mean(1,2)
sum(1,2)
mean(1:1000)
# Obviamente, o R tem a função `seq()` que nos permite criar um vetor de números ímpares.
#Note como são utilizados os argumentos da função.
?seq
1 + 1
a + b
a + b
"a" + "b"
a <- 1
a
"a"
x <- 1
class(x)
x <- "a"
class(a)
class(x)
class(mtcars)
summary(impares)
impares <- seq(from = 1,  to = 1000,  by = 2)
mean(impares)
sd(impares) # desvio-padrão
var(impares) # variância
range(impares) # amplitude
IQR(impares) # intervalo interquartil
summary(impares) # dá uma
nomes <- c("Carlos", "Davi", "Ana", "Pedro")
formacao <- c("Ciência Política", "Direito", "Tecnologia da Informação", "Jornalismo")
tempo_empresa <- c(3, 10, 10, 1)
equipe <- data.frame(nomes, formacao, tempo_empresa)
View(equipe)
nrow(equipe) # número de linhas
ncol(equipe) # número de colunas
head(equipe) # primeiras obs
summary(equipe) # resumo dos dados
impares <- seq(from = 1,  to = 1000,  by = 2)
impares[287]
impares[c(1, 76, 48)] # seleção de diversos números
impares[-c(1:250)] # todos os números menos os 250 primeiros
impares[impares > 900] # apenas valores maiores que 900
equipe[1, 3] # linha 1, coluna 3
equipe[1,] # retorna toda a linha 1
equipe[,3] # retorna toda a coluna 3
equipe[,c(1, 3)] # retorna as colunas 1 e 3
mtcars
equipe[equipe$tempo_empresa == 10,] # apenas as pessoas com 10 meses de empresa
graph_renda_expectativa_ano <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
view(graph_renda_expectativa_ano)
animate(graph_renda_expectativa_ano)
animate(graph_renda_expectativa_ano, height = 600, width =800)
library(bigrquery)
install.packages("bigrquery")
library(bigrquery)
conexao_covid <- dbConnect(
bigrquery::bigquery(),
project = "basedosdados",
dataset = "br_ms_vacinacao_covid19",
billing = "live-curso-r-bd-2"
)
conexao_populacao <- dbConnect(
bigrquery::bigquery(),
project = "basedosdados",
dataset = "br_ibge_populacao",
billing = "live-curso-r-bd-2"
)
conexao_covid <- dbConnect(
bigrquery::bigquery(),
project = "basedosdados",
dataset = "br_ms_vacinacao_covid19",
billing = "live-curso-r-bd-2"
)
conexao_populacao <- dbConnect(
bigrquery::bigquery(),
project = "basedosdados",
dataset = "br_ibge_populacao",
billing = "live-curso-r-bd-2"
)
vacinacao_base <- tbl(conexao_covid, "microdados_vacinacao") %>%
count(sigla_uf, data_aplicacao, dose) %>%
collect() %>%
mutate(
data_aplicacao = as.Date(data_aplicacao)
)
vacinacao_base <- tbl(conexao_covid, "microdados_vacinacao") %>%
count(sigla_uf, data_aplicacao, dose) %>%
collect() %>%
mutate(
data_aplicacao = as.Date(data_aplicacao)
)
populacao_estados <- tbl(conexao_populacao, "municipio") %>%
filter(ano == 2020) %>%
collect() %>%
mutate(
id_estado = str_sub(id_municipio, 1, 2),
sigla_uf = case_when(
id_estado == "12" ~ "AC",
id_estado == "27" ~ "AL",
id_estado == "16" ~ "AP",
id_estado == "13" ~ "AM",
id_estado == "29" ~ "BA",
id_estado == "53" ~ "DF",
id_estado == "23" ~ "CE",
id_estado == "32" ~ "ES",
id_estado == "52" ~ "GO",
id_estado == "21" ~ "MA",
id_estado == "51" ~ "MT",
id_estado == "50" ~ "MS",
id_estado == "31" ~ "MG",
id_estado == "15" ~ "PA",
id_estado == "25" ~ "PB",
id_estado == "41" ~ "PR",
id_estado == "26" ~ "PE",
id_estado == "22" ~ "PI",
id_estado == "33" ~ "RJ",
id_estado == "24" ~ "RN",
id_estado == "43" ~ "RS",
id_estado == "11" ~ "RO",
id_estado == "14" ~ "RR",
id_estado == "42" ~ "SC",
id_estado == "35" ~ "SP",
id_estado == "28" ~ "SE",
id_estado == "17" ~ "TO"
)
) %>%
group_by(sigla_uf) %>%
summarise(
populacao = sum(populacao)
)
vacinacao_base_por_estado <- vacinacao_base %>%
ungroup() %>%
mutate(
regiao = case_when(
sigla_uf %in% c("SP", "RJ", "MG", "ES") ~ "Sudeste",
sigla_uf %in% c("SC", "PR", "RS") ~ "Sul",
sigla_uf %in% c("MT", "DF", "GO", "MS") ~ "Centro-Oeste",
sigla_uf %in% c("AC", "AM", "RO", "RR", "PA", "AP", "TO") ~ "Norte",
TRUE ~ "Nordeste"
)
) %>%
filter(dose == "2") %>%
group_by(regiao, sigla_uf) %>%
arrange(regiao, sigla_uf, data_aplicacao) %>%
mutate(
n_acum = cumsum(n),
) %>%
filter(data_aplicacao >= as.Date("2021-01-01")) %>%
left_join(
populacao_estados
) %>%
mutate(
percentual_vacinado = n_acum/populacao
)
#Motivação --------------------------------------------------------------------
pak::pak('thomasp85/gganimate')
a <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
View(a)
a
x <- c(1,2,3,4)
sqtr(sum(x))
sqrt(sum(x))
x %>% sum() %>% sqrt()
round(mean(sum(1:10)/3), digits = 1)
c <- (1:10/3)
c %>%sum()%>%mean()%>%round(.,digits = 1)
2%>%
add(2)%>%
c(6, NA)%>%
mean(na.rm = T)%>%
equals(5)
library(magrittr)
2%>%
add(2)%>%
c(6, NA)%>%
mean(na.rm = T)%>%
equals(5)
2%>%
add(2)
2%>%
add(2)%>%
c(6, NA)
2%>%
add(2)%>%
c(6, NA)%>%
mean(na.rm = T)
2%>%
add(2)%>%
c(6, NA)%>%
mean(na.rm = T)%>%
equals(5)
2%>%
add(2)%>%
c(6, NA)%>%
mean(na.rm = T)
install.packages("tidyverse")
install.packages("here")
install.packages("magrittr")
library(tidyverse)
library(here)
library(conflicted)
install.packages("magrittr")
glimpse(cnj)
cnj <- read_csv2(here("data/tribunais_despesa_2019_cnj.csv"))
glimpse(cnj)
#Carregando o data frame
wb <- read_csv2(here("data/WB_Projects_downloaded_9_13_2021.csv"))
#Carregando o data frame
wb <- read_csv2(here("data/WB_Projects_downloaded_9_13_2021.csv"))
project_name[length(project_name)]
glimpse(wb)
wb[length(project_name)]
summary(wb$`Project Status`)
summary(wb$`Financing Type`)
pop_2022_bairros <- import("data/POPULACAO_SETOR_CENSITARIO_BAIRRO_2022 - POPULACAO_BAIRRO.csv")
install.packages("rio")
library(rio)
pop_2022_bairros <- import("data/POPULACAO_SETOR_CENSITARIO_BAIRRO_2022 - POPULACAO_BAIRRO.csv")
pop_faixa_etaria_censos <- import("data/POPULACAO_FAIXA_ETARIA_CENSOS.csv")
glimpse(pop_faixa_etaria_censos)
table(pop_faixa_etaria_censos$Idade)
pop_faixa_etaria_censos$Idade == "15 anos" %>% filter()
pop_faixa_etaria_censos$Idade %>% filter(.== "15 anos")
glimpse(pop_faixa_etaria_censos)
pop_faixa_etaria_censos[,c(1, 3)]
glimpse(pop_faixa_etaria_censos)
pop_faixa_etaria_censos[,1] == "15 anos"
a <- pop_faixa_etaria_censos[,1] == "15 anos"
op_faixa_etaria_censos[op_faixa_etaria_censos$Idade == "15 anos",]
pop_faixa_etaria_censos[pop_faixa_etaria_censos$Idade == "15 anos",]
cnj <- read_csv2(here("data/tribunais_despesa_2019_cnj.csv"))
glimpse(cnj)
sum(cnj$dpj)
max(cnj$dpj)
cnj[cnj$dpj == "13116881764"]
cnj[cnj$dpj == 13116881764]
max(cnj$dpj)
sum(cnj$dpj)
#Qual Tribunal tem a maior despesa?
max(cnj$dpj)
#Qual a tipologia desse tribunal? Eleitoral? Militar?
cnj[cnj$dpj == 13116881764,]
#Qual a tipologia desse tribunal? Eleitoral? Militar?
cnj[cnj$dpj == 13116881764,]
glimpse(cnj)
#Qual a tipologia desse tribunal? Eleitoral? Militar?
cnj[cnj$dpj == 30239704,]
cnj <- read_csv2(here("data/tribunais_despesa_2019_cnj.csv"))
cnj <- as.data.frame(cnj)
glimpse(cnj)
sum(cnj$dpj)
#Qual Tribunal tem a maior despesa?
max(cnj$dpj)
#Qual a tipologia desse tribunal? Eleitoral? Militar?
cnj[cnj$dpj == 30239704,]
#Qual Tribunal tem a maior despesa?
max(cnj$dpj)
#Qual a tipologia desse tribunal? Eleitoral? Militar?
cnj[cnj$dpj == 13116881764,]
glimpse(cnj)
#Qual a tipologia desse tribunal? Eleitoral? Militar?
cnj[cnj$uf_sede == "RS",]
#Qual Tribunal tem a maior despesa?
max(cnj$dpj)
sum(cnj$dpj)
#Qual Tribunal tem a maior despesa?
max(cnj$dpj)
View(cnj)
#Qual a tipologia desse tribunal? Eleitoral? Militar?
cnj[cnj$dpj == "13116881764",]
#Qual a tipologia desse tribunal? Eleitoral? Militar?
cnj[cnj$dpj == 13116881764,]
#Qual a tipologia desse tribunal? Eleitoral? Militar?
cnj[cnj$dpj == 30239704,]
cnj$dpj <- as.numeric(cnj$dpj)
glimpse(cnj)
sum(cnj$dpj)
#Qual Tribunal tem a maior despesa?
max(cnj$dpj)
#Qual a tipologia desse tribunal? Eleitoral? Militar?
cnj[cnj$dpj == 30239704,]
#Qual Tribunal tem a maior despesa?
max(cnj$dpj)
#Qual a tipologia desse tribunal? Eleitoral? Militar?
cnj[cnj$uf_sede == "PE",]
knitr::opts_chunk$set(echo = TRUE)
#Carregando o data frame
wb <- read_csv2(here("data/WB_Projects_downloaded_9_13_2021.csv"))
install.packages("tidyverse")
install.packages("here")
install.packages("magrittr")
install.packages("rio")
library(tidyverse)
library(here)
library(conflicted)
library(rio)
#Carregando o data frame
wb <- read_csv2(here("data/WB_Projects_downloaded_9_13_2021.csv"))
#Criando um objeto que seja um vetor com os nomes dos projetos
project_name <- wb$project_name
#A função length retorna o tamanho de objetos R, como vetores, listas ou strings
project_name[length(project_name)]
max(wb$`Current Project Cost`)
dfwb <- wb[!is.na(wb$`Current Project Cost`),]
max(dfwb$`Current Project Cost`)
#Reordeno as linhas de acordo com a variávelel do valor do projeto
wbnew <- dfwb[order(dfwb$`Current Project Cost`),]
#Crio um novo vetor com a nova ordem
project_name_new <- wbnew$project_name
#Visualizo por meio da função lenght qual é o caso. A resposta final é:
project_name_new[length(project_name_new)]
vetor <- c(1, 2, 3)
vetor[4]
vetor[4]
5 == NA
idade_ana <- 30
idade_beto <- NA
idade_carla <- NA
idade_ana == idade_beto
idade_beto == idade_carla
is.na(NA)
is.na(idade_ana)
is.na(idade_beto)
is.na(c(idade_ana, idade_beto, idade_carla))
